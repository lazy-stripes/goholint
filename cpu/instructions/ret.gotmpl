// {{.Opcode | printf "%02X"}}: {{.Instruction}} {{if .Flag}}{{if eq .Operator "!"}}N{{end}}{{.Flag}}{{end}}		{{if .Flag}}20/8{{else}}16{{end}} cycles
type {{name .}} struct {
	MultiStepsOp
}

func (op *{{name .}}) Tick() (done bool) {
	switch op.step {
	case 0:
{{- if .Flag}}
		if op.cpu.F&Flag{{.Flag}} {{.Operator}}= Flag{{.Flag}} {
			op.step++
		} else {
			done = true
		}
	case 1:
{{- end}}
		op.cpu.PC = uint16(op.cpu.MMU.Read(op.cpu.SP))
		op.cpu.SP++
		op.step++
{{- if .Flag}}
	case 2:
{{- else}}
	case 1:
{{- end}}
		op.cpu.PC |= uint16(op.cpu.MMU.Read(op.cpu.SP)) << 8
		op.cpu.SP++
		op.step++
{{- if .Flag}}
	case 3:
{{- else}}
	case 2:
{{- end}}
{{- if eq .Instruction "RETI" }}
		op.cpu.IME = true
{{- end}}
		// [GEKKIO] mentions an internal delay.
		done = true
	}
	return
}

