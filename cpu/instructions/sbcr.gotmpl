// {{.Opcode | printf "%02X"}}: SBC A,{{.Register}}		4 cycles
type {{name .}} struct {
	SingleStepOp
}

func (op *{{name .}}) Execute(c *CPU) (done bool) {
	carry := int((c.F & FlagC) >> 4)
	// Flags: z 1 h c
	c.F = FlagN
	result := int(c.A) - int(c.temp8) - carry
	// Trusting the Internet on this one.
	if (c.A ^ c.temp8 ^ uint8(result&0xff)) & (1 << 4) != 0 {
		c.F |= FlagH
	}
	if result < 0 {
		c.F |= FlagC
	}
	c.A = uint8(result&0xff)
	if c.A == 0 {
		c.F |= FlagZ
	}
    return true
}


