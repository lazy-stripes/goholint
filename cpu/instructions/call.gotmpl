// {{.Opcode | printf "%02X"}}: CALL {{if .Flag}}{{if eq .Operator "!"}}N{{end}}{{.Flag}},{{end}}a16		24{{if .Operator}}/12{{end}} cycles
type {{name .}} struct {
	MultiStepsOp
}

func (op *{{name .}}) Tick() (done bool) {
	switch op.step {
	case 0:
		op.cpu.temp16 = uint16(op.cpu.NextByte())
		op.step++
	case 1:
		op.cpu.temp16 |= uint16(op.cpu.NextByte()) << 8
{{- if .Flag}}
		if op.cpu.F&Flag{{.Flag}} {{.Operator}}= Flag{{.Flag}} {
			op.step++
		} else {
			done = true
		}
{{- else}}
		op.step++
{{- end}}
	case 2:
		op.cpu.SP--
		op.cpu.MMU.Write(uint(op.cpu.SP), uint8(op.cpu.PC>>8))
		op.step++
	case 3:
		op.cpu.SP--
		op.cpu.MMU.Write(uint(op.cpu.SP), uint8(op.cpu.PC&0xff))
		op.step++
	case 4:
		op.cpu.PC = op.cpu.temp16
		done = true
	}
	return
}

