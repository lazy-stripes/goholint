// {{.Opcode | printf "%02X"}}: ADC A,{{with .Address}}({{.}}){{else}}d8{{end}}		8 cycles
type {{name .}} struct {
	MultiStepsOp
}

func (op *{{name .}}) Tick() (done bool) {
	carry := (op.cpu.F & FlagC) >> 4
	// Flags: z 0 h c
	op.cpu.F = 0
{{- with .Address}}
	value := op.cpu.MMU.Read(op.cpu.{{.}}())
{{- else}}
	value := op.cpu.NextByte()
{{- end}}
	if (op.cpu.A & 0x0f) + (value & 0x0f) + carry > 0x0f {
		op.cpu.F |= FlagH
	}
	result := uint16(op.cpu.A) + uint16(value) + uint16(carry)
	if result > 0xff {
		op.cpu.F |= FlagC
	}
	op.cpu.A = uint8(result & 0xff)
	if op.cpu.A == 0 {
		op.cpu.F |= FlagZ
	}
    return true
}


