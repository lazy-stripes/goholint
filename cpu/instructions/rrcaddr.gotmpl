// CB {{.Opcode | printf "%02X"}}: RRC ({{.Address}})				16 cycles
type {{name .}} struct {
	MultiStepsOp
}

func (op *{{name .}}) Tick() (done bool) {
	switch op.step {
	case 0:
		op.cpu.temp8 = op.cpu.MMU.Read(uint(op.cpu.{{.Address}}()))
		op.step++
	case 1:
		// Flags z 0 0 c
		op.cpu.F = 0x00
		result := op.cpu.temp8 >> 1
		if op.cpu.temp8&1 != 0 {
			result |= (1 << 7)
			op.cpu.F |= FlagC
		}
		if result == 0 {
			op.cpu.F |= FlagZ
		}

		op.cpu.MMU.Write(uint(op.cpu.{{.Address}}()), result)
		done = true
	}
	return
}

