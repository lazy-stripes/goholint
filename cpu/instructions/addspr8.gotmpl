// {{.Opcode | printf "%02X"}}: {{if eq .Register "SP"}}ADD SP,r8{{else}}LD HL,SP+r8{{end}}		{{if eq .Register "SP"}}16{{else}}12{{end}} cycles
type {{name .}} struct {
	MultiStepsOp
	offset int8
}

func (op *{{name .}}) Tick() (done bool) {
	switch op.step {
	case 0:
		op.offset = int8(op.cpu.NextByte())
		op.step++
	case 1:
{{- if eq .Register "SP"}}
		// [REF NEEDED] extra cycle
		op.step++
	case 2:
{{- end}}
		// Flags: 0 0 h c
		op.cpu.F = 0

		// Need cast to signed for the potential substraction
		if (int16(op.cpu.SP)&0x0f+int16(op.offset)&0x0f)&0x10 != 0 {
			op.cpu.F |= FlagH
		}
		if (int16(op.cpu.SP)&0xff+int16(op.offset)&0xff)&0x100 != 0 {
			op.cpu.F |= FlagC
		}
		result := int16(op.cpu.SP) + int16(op.offset)
{{- if eq .Register "SP"}}
		op.cpu.{{.Register}} = uint16(result)
{{- else}}
		op.cpu.Set{{.Register}}(uint16(result))
{{- end}}
		done = true
	}
	return
}

