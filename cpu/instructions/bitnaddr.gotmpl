// CB {{.Opcode | printf "%02X"}}: BIT {{.Bit}},({{.Address}})			12 cycles
type {{name .}} struct {
	MultiStepsOp
}

func (op *{{name .}}) Tick() (done bool) {
	op.cpu.temp8 = op.cpu.Memory.Read(op.cpu.{{.Address}}())
	// Flags z 0 1 -
	if op.cpu.temp8&(1<<{{.Bit}}) == 0 {
		op.cpu.F = (op.cpu.F & ^FlagN) | FlagZ | FlagH
	} else {
		op.cpu.F = (op.cpu.F & ^(FlagN | FlagZ)) | FlagH
	}
	return true
}

